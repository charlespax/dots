" this is a line of text that I am using for testing some of the settings in this vim configuratoin. I am not sure what everything does and I am trying to learn by editing thie vimrc file and trying out things.

"" Enable filetype plugins
"filetype plugin on
"filetype indent on
"
"
"" With a map leader it's possible to do extra key combinations
"" like <leader>w saves the current file
"let mapleader = "\\"
"let g:mapleader = "\\"
"
"" Fast saving
"nmap <leader>w :w!<cr>
"
"" :W sudo saves the file 
"" (useful for handling the permission-denied error)
"command W w !sudo tee % > /dev/null

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => VIM user interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Turn on the WiLd menu
"set wildmenu
"
"" Ignore compiled files
"set wildignore=*.o,*~,*.pyc
"if has("win16") || has("win32")
"        set wildignore+=.git\*,.hg\*,.svn\*
"else
"        set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
"endif
"

"""""""""""""""""""""""""""""""
"" => Visual mode related
"""""""""""""""""""""""""""""""
"" Visual mode pressing * or # searches for the current selection
"" Super useful! From an idea by Michael Naumann
"vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
"vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Moving around, tabs, windows and buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Disable highlight when <leader><cr> is pressed
"map <silent> <leader><cr> :noh<cr>
"
"" Smart way to move between windows
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l
"
"" Close the current buffer
"map <leader>bd :Bclose<cr>:tabclose<cr>gT
"
"" Close all the buffers
"map <leader>ba :bufdo bd<cr>
"
"map <leader>l :bnext<cr>
"map <leader>h :bprevious<cr>
"
"" Useful mappings for managing tabs
"map <leader>tn :tabnew<cr>
"map <leader>to :tabonly<cr>
"map <leader>tc :tabclose<cr>
"map <leader>tm :tabmove 
"map <leader>t<leader> :tabnext 
"
"" Let 'tl' toggle between this and the last accessed tab
"let g:lasttab = 1
"nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
"au TabLeave * let g:lasttab = tabpagenr()
"
"
"" Opens a new tab with the current buffer's path
"" Super useful when editing files in the same directory
"map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
"
"" Switch CWD to the directory of the open buffer
"map <leader>cd :cd %:p:h<cr>:pwd<cr>
"
"" Specify the behavior when switching between buffers 
"try
"        set switchbuf=useopen,usetab,newtab
"        set stal=2
"catch
"endtry
"
"" Return to last edit position when opening files (You want this!)
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"""""""""""""""""""""""""""""""
"" => Status line
"""""""""""""""""""""""""""""""
"" Always show the status line
set laststatus=2 " Always show the status line
"
"" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Editing mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Remap VIM 0 to first non-blank character
"map 0 ^
"
"" Move a line of text using ALT+[jk] or Command+[jk] on mac
"nmap <M-j> mz:m+<cr>`z
"nmap <M-k> mz:m-2<cr>`z
"vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"
"if has("mac") || has("macunix")
"        nmap <D-j> <M-j>
"        nmap <D-k> <M-k>
"        vmap <D-j> <M-j>
"        vmap <D-k> <M-k>
"endif
"
"" Delete trailing white space on save, useful for Python and CoffeeScript ;)
"func! DeleteTrailingWS()
"        exe "normal mz"
"        %s/\s\+$//ge
"        exe "normal `z"
"endfunc
"autocmd BufWrite *.py :call DeleteTrailingWS()
"autocmd BufWrite *.coffee :call DeleteTrailingWS()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Ag searching and cope displaying
""    requires ag.vim - it's much better than vimgrep/grep
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" When you press gv you Ag after the selected text
"vnoremap <silent> gv :call VisualSelection('gv', '')<CR>
"
"" Open Ag and put the cursor in the right position
"map <leader>g :Ag 
"
"" When you press <leader>r you can search and replace the selected text
"vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>
"
"" Do :help cope if you are unsure what cope is. It's super useful!
""
"" When you search with Ag, display your results in cope by doing:
""   <leader>cc
""
"" To go to the next search result do:
""   <leader>n
""
"" To go to the previous search results do:
""   <leader>p
""
"map <leader>cc :botright cope<cr>
"map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
"map <leader>n :cn<cr>
"map <leader>p :cp<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Spell checking
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Pressing ,ss will toggle and untoggle spell checking
"map <leader>ss :setlocal spell!<cr>
"
"" Shortcuts using <leader>
"map <leader>sn ]s
"map <leader>sp [s
"map <leader>sa zg
"map <leader>s? z=

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Remove the Windows ^M - when the encodings gets messed up
"noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
"
"" Quickly open a buffer for scribble
"map <leader>q :e ~/buffer<cr>
"
"" Quickly open a markdown buffer for scribble
"map <leader>x :e ~/buffer.md<cr>
"
"" Toggle paste mode on and off
"map <leader>pp :setlocal paste!<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Helper functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"function! CmdLine(str)
"        exe "menu Foo.Bar :" . a:str
"        emenu Foo.Bar
"        unmenu Foo
"endfunction 
"
"function! VisualSelection(direction, extra_filter) range
"        let l:saved_reg = @"
"        execute "normal! vgvy"
"
"        let l:pattern = escape(@", '\\/.*$^~[]')
"        let l:pattern = substitute(l:pattern, "\n$", "", "")
"
"        if a:direction == 'gv'
"                call CmdLine("Ag \"" . l:pattern . "\" " )
"        elseif a:direction == 'replace'
"                call CmdLine("%s" . '/'. l:pattern . '/')
"        endif
"
"        let @/ = l:pattern
"        let @" = l:saved_reg
"endfunction
"
"
"" Returns true if paste mode is enabled
"function! HasPaste()
"        if &paste
"                return 'PASTE MODE  '
"        endif
"        return ''
"endfunction
"
"" Don't close window, when deleting a buffer
"command! Bclose call <SID>BufcloseCloseIt()
"function! <SID>BufcloseCloseIt()
"        let l:currentBufNum = bufnr("%")
"        let l:alternateBufNum = bufnr("#")
"
"        if buflisted(l:alternateBufNum)
"                buffer #
"        else
"                bnext
"        endif
"
"        if bufnr("%") == l:currentBufNum
"                new
"        endif
"
"        if buflisted(l:currentBufNum)
"                execute("bdelete! ".l:currentBufNum)
"        endif
"endfunction
"
"
"highlight ColorColumn ctermbg=234
"highlight CursorLine ctermbg=234
"highlight CursorColumn ctermbg=234

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Personal
""
"" NOTE: See the end of this document for highlighting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"
"" Save and run opened file
"" :S escapes spaces in the execution path
"map <F2> <Esc>:w<CR>:!%:p:S<CR>
"
""set visualbell
"
"
"" :help always opens help in a new tab
"" cabbrev help tab help 
"vmap j gj
"vmap k gk
"nmap j gj
"nmap k gk
"
"" Enable code folding in syntax mode.
"" zc - Fold code block
"" zo - Unfold code block
"" zM - Folds all blocks
"" zR - Unforlds all blocks
"" More info: http://vim.wikia.com/wiki/Folding
"set foldmethod=indent   
"set foldnestmax=10
"set nofoldenable
"set foldlevel=2
"" Enable folding for bash scripts
"au FileType sh let g:sh_fold_enabled=5
"au FileType sh let g:is_bash=1
""
""    -> Files and backups
""    -> Text, tab and indent related
""    -> Visual mode related
""    -> Moving around, tabs and buffers
""    -> Status line
""    -> Editing mappings
""    -> vimgrep searching and cope displaying
""    -> Spell checking
""    -> Misc
""    -> Helper functions

"" General Behavior
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible             " vi compatability

set history=5000             " command history

"set encoding=utf8            " Set utf8 standard encoding

"set ffs=unix,dos,mac         " Use Unix as the standard file type

set nobackup                 " backup before overwrite
set nowritebackup            " backup before overwrite, remove backup
set noswapfile               " wire buffer to a swapfile

"" User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number                   " show line numbers
set relativenumber           " line numbers are relative to cursor

set foldcolumn=1             " add column to indicate folded code

set cursorline               " horizontal line at cursor
highlight CursorLine ctermbg=234

set cursorcolumn             " vertical line at cursor
highlight CursorColumn ctermbg=234

set colorcolumn=80           " vertical line at column n
highlight ColorColumn ctermbg=234

set scrolloff=999            " page scrolls to keep n lines around cursor

colorscheme lunaperche
set background=dark

syntax enable                " syntax highlighting

" Search
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch                 " highlight search results
set incsearch                " highlight search results as you type

set ignorecase               " ignore case when searching
set smartcase                " override ignorecase term has uppercase

set magic " needed for regex

" Text Behavior
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set smarttab                 " treat groups of spaces as tabs

set list                     " show unprintable characters described below
set listchars=tab:⍿·,trail:X,eol:¬

set autoindent               " current indent copied to new line
set smartindent              " move (de)indent brackets automatically

" File handling 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoread                 " reload file if externally edited

"" Helpers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" help opens in a new tab
cabbrev help tab help

" Save and run opened file
" :S escapes spaces in the execution path
map <F2> <Esc>:w<CR>:!%:p:S<CR>

"" Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command Hello echo "Hello, world!"

