""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Ag searching and cope displaying
""    requires ag.vim - it's much better than vimgrep/grep
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" When you press gv you Ag after the selected text
"vnoremap <silent> gv :call VisualSelection('gv', '')<CR>
"
"" Open Ag and put the cursor in the right position
"map <leader>g :Ag 
"
"" When you press <leader>r you can search and replace the selected text
"vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>
"
"" Do :help cope if you are unsure what cope is. It's super useful!
""
"" When you search with Ag, display your results in cope by doing:
""   <leader>cc
""
"" To go to the next search result do:
""   <leader>n
""
"" To go to the previous search results do:
""   <leader>p
""

"map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
"map <leader>n :cn<cr>
"map <leader>p :cp<cr>
"
"" cabbrev help tab help 
"vmap j gj
"vmap k gk
"nmap j gj
"nmap k gk

" General Behavior
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible             " vi compatability
"
set history=5000             " command history
"
"set encoding=utf8            " Set utf8 standard encoding
"
"set ffs=unix,dos,mac         " Use Unix as the standard file type
"
set nobackup                 " backup before overwrite
set nowritebackup            " backup before overwrite, remove backup
set noswapfile               " wire buffer to a swapfile
"
" <leader> is <SPACE> (do not remap this key)
let mapleader=" "
nnoremap <SPACE> <Nop>

" User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number                   " show line numbers
set relativenumber           " line numbers are relative to cursor
"
set foldcolumn=1             " add column to indicate folded code
"
set cursorline               " horizontal line at cursor
highlight CursorLine ctermbg=234
"
set cursorcolumn             " vertical line at cursor
highlight CursorColumn ctermbg=234
"
set colorcolumn=80           " vertical line at column n
highlight ColorColumn ctermbg=234
"
set scrolloff=999            " page scrolls to keep n lines around cursor
"
colorscheme lunaperche       " default is lunaperche
set background=dark          " dark background
"
syntax enable                " syntax highlighting
"
set laststatus=2             " Always show the status line
"
" disable highlighting
map <silent> <leader><cr> :nohlsearch<cr>

" Search
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch                 " highlight search results
set incsearch                " highlight search results as you type
"
set ignorecase               " ignore case when searching
set smartcase                " override ignorecase term has uppercase
"
set magic " needed for regex
"
" pressing * or # searches for the current selection (visual mode)
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>
"
"function! VisualSelection(direction, extra_filter) range
"        let l:saved_reg = @"
"        execute "normal! vgvy"
"
"        let l:pattern = escape(@", '\\/.*$^~[]')
"        let l:pattern = substitute(l:pattern, "\n$", "", "")
"
"        if a:direction == 'gv'
"                call CmdLine("Ag \"" . l:pattern . "\" " )
"        elseif a:direction == 'replace'
"                call CmdLine("%s" . '/'. l:pattern . '/')
"        endif
"
"        let @/ = l:pattern
"        let @" = l:saved_reg
"endfunction

" Text Behavior
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set smarttab                 " treat groups of spaces as tabs
"
set list                     " show unprintable characters described below
set listchars=tab:⍿·,trail:X,eol:¬
"
set autoindent               " current indent copied to new line
set smartindent              " move (de)indent brackets automatically
"
" Enable code folding in syntax mode.
" zc - Fold code block
" zo - Unfold code block
" zM - Folds all blocks
" zR - Unforlds all blocks
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2
"
" Enable folding for bash scripts
au FileType sh let g:sh_fold_enabled=5
au FileType sh let g:is_bash=1
"
" filetype plugins
filetype on                  " filetype detection
filetype plugin on           " filetype plugins
filetype indent on           " indentation plugins

" File handling 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoread                 " reload file if externally edited
"
" when opening a file, move cursor to the most recent position
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"
" write file
nmap <leader>w :w!<cr>
"
" write file with sudo premissions
command W w !sudo tee % > /dev/null
"
" when writing a file, delete trailing wite space
func! DeleteTrailingWS()
        exe "normal mz"
        %s/\s\+$//ge
        exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

" Save and run opened file
" :S escapes spaces in the execution path
map <F2> <Esc>:w<CR>:!%:p:S<CR>

" Helpers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" help opens in a new tab
cabbrev help tab help
"
" Save and run opened file
" :S escapes spaces in the execution path
map <F2> <Esc>:w<CR>:!%:p:S<CR>

" Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command Hello echo "Hello, world!"

" Movement
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" select window
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
"
" move cursor to first non-blank character
map 0 ^

" Spell Checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" toggle spell checking
map <leader>ss :setlocal spell!<cr>
"
" move to the next misspelled word
map <leader>sn ]s
" move to the previous misspelled word
map <leader>sp [s
"
" permanently mark word as correct
map <leader>sa zg
"
" give spelling suggestions
map <leader>s? z=

" Other
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Opens a new tab with the current buffer's path
"" Super useful when editing files in the same directory
"map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
"
"" Switch CWD to the directory of the open buffer
"map <leader>cd :cd %:p:h<cr>:pwd<cr>

" open a window with the current list of errors
map <leader>cc :botright cope<cr>

